import numpy as np
from matplotlib.animation import FuncAnimation
import imageio
import tifffile
from pathlib import Path
from matplotlib import pyplot as plt
import pandas as pd
import os

CHANNEL_VEC = np.arange(0, 32)
data_path = Path('/Users/cristinazhu/Material/Material')
exp_path  = data_path/'Data'
lsm_path = exp_path/'lsm_data'


spec = []
all_spec = []
spectra = []
filename = []


def create_gif(data, dim_index, filename):
    images = []
    for t in range(data.shape[0]):
        fig, ax = plt.subplots()
        ax.imshow(data[t, dim_index], cmap='gray')
        ax.set_title(f'Time: {t}, Dimension: {dim_index}')
        plt.axis('off')

        # Save the plot to a temporary file
        temp_filename = f'temp_{t}.png'
        plt.savefig(temp_filename)
        plt.close(fig)

        # Read the image and append to the list
        images.append(imageio.imread(temp_filename))

    # Create the GIF
    imageio.mimsave(filename, images, fps=2)  # Adjust the fps as needed

# Create GIFs for the first 32 dimensions



for ext in ('lsm', 'tiff'):
    print(lsm_path.glob(f'*.{ext}'))
    for file_path in lsm_path.glob(f'*.{ext}'):
        ############ FILE PATH NAME SPLITTING #############
        name_parts = file_path.stem.split('_')

        # plate = name_parts[0]
        # location = name_parts[1]
        # interface =  name_parts[2]
        # name = plate + location + interface
        ## These variables should line up with the naming scheme of the LSM files
        ## when separated by underscores.
        try:
            treatment, *other_parts = name_parts
            cell_type = None
        except:
            cell_type = name_parts[0]
            treatment = 'NO_TREATMENT'
            other_parts = []
        if len(other_parts) > 0:
            tile_id = other_parts[-1]
        else:
            tile_id = 0

        ############### FILE PATH FILTER #################

        if tile_id == 'all':
            continue

        ############### READING AND UNMIXING #############
        print(file_path.stem)

        # get raw lsm data
        raw_arr = tifffile.imread(file_path)
        # remove the brightfield if it exists
        print(raw_arr)


        for t in range(raw_arr.shape[0]):
            sepc = np.sum(raw_arr[t, :32, ...], axis=(1, 2))
            all_spec.append(sepc)
            #filename.append(name_parts)

        filenames = []
        for i in range(raw_arr.shape[0]):
            print(i)
            fig = plt.figure()
            x = 405 + CHANNEL_VEC * 8.9
            plt.plot(x, all_spec[i])
            plt.xlim(400, 700)
            plt.xlabel('Wavelength in nm')
            plt.ylabel('Photon Count')
            plt.title('Spectral')

            filename = f'frame_{i}.png'
            plt.savefig(filename)
            filenames.append(filename)
            plt.close(fig)
            print(all_spec[i])

        # Create the GIF
        with imageio.get_writer(f'{name_parts}.gif', mode='I', duration=1) as writer:
            for filename in filenames:
                image = imageio.imread(filename)
                writer.append_data(image)

        # Clean up the image files
        for filename in filenames:
            os.remove(filename)

        plt.show()

print('A')
